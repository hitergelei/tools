#!/usr/bin/env python

import sys
import numpy as np

def masking_data(data, chem_mask):
    new_data = []
    for i in range(len(chem_mask)):
        new_data.append(data[i][chem_mask[i]])
    return(new_data)

def argparse():
    import argparse
    parser = argparse.ArgumentParser(description = """
    This code will show you a histogram of energies, forces, velocities or momentum from atoms list.
    """)
    # Positional arguments
    parser.add_argument('inp_file', type=str, help='ASE readable atoms list file name.')
    parser.add_argument('target', type=str, help='Choose target property among e(:energy), eperatom(:energy/atom) f(:force), v(:velocity), p(:momentum), s(:stress), ak(:atomic kinetic energy), ap(:atomic potential energy).')
    # Optional arguments
    parser.add_argument('-n', '--image_slice', type=str, default=':', help='Image slice following python convention. default=":" (e.g.) -n :1000:10')
    parser.add_argument('-c', '--chem_symbol', type=str, default=None, nargs='+', help='Plot histogram of specified chemical symbols. Only valid for (f, v, p, ak, ap) targets. Multiple input supported. default=all')
    parser.add_argument('-m', '--bin_number', type=int, default=200, help="Number of histogram's bin. default=200")
    parser.add_argument('-u', '--bin_upper', type=float, default=None, help="Upper limit of histogram's bin. default=automatic")
    parser.add_argument('-l', '--bin_lower', type=float, default=None, help="Upper limit of histogram's bin. default=automatic")
    return parser.parse_args()

if __name__ == '__main__':
    ## Intro
    import datetime
    now = datetime.datetime.now()
    time = now.strftime('%Y-%m-%d %H:%M:%S')
    print('')
    print('>>>>> Code by Young Jae Choi @ POSTECH <<<<<'.center(120))
    print(('Code runtime : '+time).center(120))
    print('')
    print('=================================================================================================='.center(120))
    print('This code will show you a histogram of energies, forces, velocities or momentum from atoms list.'.center(120))
    print('=================================================================================================='.center(120))
    print('')
    args = argparse()
    # Read file
    from ase.io import read
    alist = read(args.inp_file, args.image_slice)
    if type(alist) is not list:
        alist = [alist]

    #
    atomic_types = ['f', 'v', 'p', 'ak', 'ap']
    if args.chem_symbol:
        if args.target not in atomic_types:
            raise RuntimeError('{} is not atomic-type data ({}).'.format(args.target, atomic_types))
        chem_mask = []
        for atoms in alist:
            chem_arr = np.array(atoms.get_chemical_symbols())
            mask_tmp = np.full(len(atoms), False)
            for chem in args.chem_symbol:
                mask_tmp += chem_arr == chem
            chem_mask.append(mask_tmp)

    if args.target == 'e':
        vector_type = False
        from ss_util import E_fromAlist
        data = E_fromAlist(alist)
    elif args.target == 'eperatom':
        vector_type = False
        from ss_util import Eperatom_fromAlist
        data = Eperatom_fromAlist(alist)
    elif args.target == 'f':
        vector_type = True
        from ss_util import F_fromAlist
        data = F_fromAlist(alist)
        if args.chem_symbol:
            data = masking_data(data, chem_mask)
        data = np.concatenate(data, 0)
    elif args.target == 'v':
        vector_type = True
        from ss_util import v_fromAlist 
        data = v_fromAlist(alist)
        if args.chem_symbol:
            data = masking_data(data, chem_mask)
        data = np.concatenate(data, 0)
    elif args.target == 'p':
        vector_type = True
        from ss_util import P_fromAlist 
        data = P_fromAlist(alist)
        if args.chem_symbol:
            data = masking_data(data, chem_mask)
        data = np.concatenate(data, 0)
    elif args.target == 's':
        vector_type = False
        from ss_util import S_fromAlist 
        data = S_fromAlist(alist)[:,0:3].reshape((-1)) ## Diagonal component only
    elif args.target == 'ak':
        vector_type = False
        from ss_util import AtomicK_fromAlist
        data = AtomicK_fromAlist(alist)
        if args.chem_symbol:
            data = masking_data(data, chem_mask)
        data = np.concatenate(data, 0)
    elif args.target == 'ap':
        vector_type = False
        from ss_util import AtomicP_fromAlist
        data = AtomicP_fromAlist(alist)
        if args.chem_symbol:
            data = masking_data(data, chem_mask)
        data = np.concatenate(data, 0)
    else:
        raise ValueError('{} is an unknown target.'.format(args.target))
    # Set bins
    bin_lower = data.min() if args.bin_lower is None else args.bin_lower
    bin_upper = data.max() if args.bin_upper is None else args.bin_upper
    if vector_type:
        data_norm    = np.linalg.norm(data, axis=-1)
        data = data.reshape(-1)
        # Set norm data's bins
        norm_bin_lower = data_norm.min()
        norm_bin_upper = data_norm.max() if args.bin_upper is None else args.bin_upper

    ## plot
    from matplotlib import pyplot as plt
    font = {'family':'sans-serif', 'sans-serif':'Arial'}
    plt.rc('font', **font)
    if vector_type:
        fig, (ax, ax_norm) = plt.subplots(1,2)
    else:
        fig, ax = plt.subplots()
    mean = np.mean(data)
    std = np.std(data)
    n, bins, patches = ax.hist(data, bins=args.bin_number, range=[bin_lower, bin_upper], facecolor='purple', alpha=0.70)
    max_height = np.amax(n)
    ax.set_title('{} by elements (Chem.: {})'.format(args.target, args.chem_symbol), fontsize='x-large')
    ax.set_xlabel('%d data\nmean = %.3e\ndeviation = %.3e' % (len(data), mean, std), fontsize='large')
    ax.barh(max_height/8, std, height=max_height/50, left=mean, color='k')
    ax.axvline(x=mean, c='k')
    ax.grid(alpha=0.4)
    ax.set_ylabel('Population', fontsize='x-large')
    ax.tick_params(axis="both",direction="in", labelsize='x-large')
    plt.subplots_adjust(left=0.20, bottom=0.20, right=0.80, top=0.80, wspace=0.2, hspace=0.2)
    if vector_type:
        mean = np.mean(data_norm)
        std = np.std(data_norm)
        n, bins, patches = ax_norm.hist(data_norm, bins=args.bin_number, range=[norm_bin_lower, norm_bin_upper], facecolor='purple', alpha=0.70)
        max_height = np.amax(n)
        ax_norm.set_title('{} by norms (Chem.: {})'.format(args.target, args.chem_symbol), fontsize='x-large')
        ax_norm.set_xlabel('%d data\nmean = %.3e\ndeviation = %.3e' % (len(data_norm), mean, std), fontsize='large')
        ax_norm.barh(max_height/8, std, height=max_height/50, left=mean, color='k')
        ax_norm.axvline(x=mean, c='k')
        ax_norm.grid(alpha=0.4)
        ax_norm.tick_params(axis="both",direction="in", labelsize='x-large')
        plt.subplots_adjust(left=0.20, bottom=0.20, right=0.80, top=0.80, wspace=0.2, hspace=0.2)
    plt.show()

